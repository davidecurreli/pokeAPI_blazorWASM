@page "/details/{pokemonID}"

@inject HttpClient HttpClient
@inject NavigationManager navigationManager;

@using BlazorApp.Models
@using HttpServices;
@using UtilityFunctions;

<div class="container" style="margin-top: 40px; text-align: center;">
    <div class="h5" style="margin-bottom: 40px;">@pokemonDetails.Name</div>
    <table class="table">
        <thead>
            <tr>
                <th scope="col">Pokemon name</th>
                <th scope="col">Abilities</th>
                <th scope="col">Types</th>
                <th scope="col">Base Experience</th>
                <th scope="col">Height</th>
                <th scope="col">Weight</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <th scope="row">@pokemonDetails.Name</th>
                <td>
                    <ul>
                        @foreach (var ability in pokemonAbilities)
                        {
                            <li>@ability.Ability.Name</li>
                        }
                    </ul>
                </td>
                <td>
                    <ul>
                        @foreach (var type in pokemonTypes)
                        {
                            <li>@type.Type.Name</li>
                        }
                    </ul>
                </td>
                <td>@pokemonDetails.Base_experience</td>
                <td>@pokemonDetails.Height</td>
                <td>@pokemonDetails.Weight</td>
            </tr>
        </tbody>
    </table>

    <button type="button" class="btn btn-primary" @onclick="RedirectHome">Back to Home!</button>
</div>

@code{
    [Parameter]
    public string pokemonID { get; set; }

    private HttpService http = new();

    private PokemonDetails pokemonDetails = new PokemonDetails();
    List<PokemonAbility> pokemonAbilities = new List<PokemonAbility>();
    List<PokemonType> pokemonTypes = new List<PokemonType>();


    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await http.GetPokemonDetails(pokemonID);

            pokemonAbilities = response.Abilities.ToList<PokemonAbility>();
            pokemonTypes = response.Types.ToList<PokemonType>();

            pokemonDetails.Base_experience = response.Base_experience;
            pokemonDetails.Name = Util.FormatString(response.Name);
            pokemonDetails.Weight = response.Weight;
            pokemonDetails.Height = response.Height;

        }
        catch (Exception ex)
        {
            navigationManager.NavigateTo($"/error/{ex.Message}");
        }
    }

    protected void RedirectHome()
    {
        navigationManager.NavigateTo("/");
    }

}
